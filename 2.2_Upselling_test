# This part processes the test data and create the first version of submission with xgb_model from 2.1_Upselling_train 

train_2015 <- read_csv("train_2015.csv")
users_2015 <- read_csv("users_2015.csv")
##########################################
# Swap cathegorical features #############
##########################################
users<-users_2015
users <- transform(users, Age1 = ifelse(AGE_CAT =='a', 1, 0))
users <- transform(users, Age2 = ifelse(AGE_CAT =='b', 1, 0))
users <- transform(users, Age3 = ifelse(AGE_CAT =='c', 1, 0))
users$AGE_CAT<-NULL
users <- transform(users, CAP = ifelse(LOC_CAT =='a', 1, 0))
users <- transform(users, CIT = ifelse(LOC_CAT =='b', 1, 0))
users <- transform(users, VIL = ifelse(LOC_CAT =='c', 1, 0))
users$LOC_CAT<-NULL
users <- transform(users, INC = ifelse(INC_CAT =='d', 0, ifelse(INC_CAT =='a', 1, ifelse(INC_CAT =='b', 2, 3))))
users <- transform(users, INC0 = ifelse(INC_CAT =='d', 1, 0))
users <- transform(users, INC1 = ifelse(INC_CAT =='a', 1, 0))
users <- transform(users, INC2 = ifelse(INC_CAT =='b', 1, 0))
users <- transform(users, INC3 = ifelse(INC_CAT =='c', 1, 0))
users$INC_CAT<-NULL
##########################################
# Wealth feature   #######################
##########################################
users$WH<-apply(users[,11:16], 1, max)
users$WY<-users$WH   
users[,c('W201501','W201502','W201503','W201504','W201505','W201506')]<- list(NULL)
##########################################
# Have/had card feature   ################
##########################################
users$Have1<-users$C201501
users$Have<-users$C201506
users$Had<-users$C201501-users$C201506
users$Had[users$Had==-1]<-0
users[,c('C201501','C201502','C201503','C201504','C201505','C201506')]<- list(NULL)
##################################################################################
# Transaction features ###########################################################
##################################################################################
# Fill NAs
train <- train_2015
train <- transform(train, CHANNEL_Net = ifelse(CHANNEL=='n', 1, 0))
train <- transform(train, CHANNEL_Pos = ifelse(CHANNEL=='p', 1, 0))
train <- transform(train, CHANNEL_Br = ifelse(CHANNEL=='b', 1, 0))
#
train <- transform(train, AMT = ifelse(AMT_CAT=='a', 1, ifelse(AMT_CAT=='b', 10, 100)))
train <- transform(train, AMTsmall = ifelse(AMT_CAT=='a', 1, ifelse(AMT_CAT=='b', 10, 0)))
train <- transform(train, AMTa = ifelse(MC_CAT=='a', AMT, 0))
train <- transform(train, AMTb = ifelse(MC_CAT=='b', AMT, 0))
##########################################
# Spending amount and freqency  ##########
##########################################
DF <- setNames(aggregate(list(train$AMT,train$AMTsmall,train$AMTa,train$AMTb,train$CHANNEL_Net,train$CHANNEL_Pos,train$CHANNEL_Br), list(train$USER_ID),sum), c('USER_ID','AMT','AMTsmall','AMTa','AMTb','NetFreq','PosFreq','BrFreq'))
users<-merge(users,DF,by='USER_ID',all.x = TRUE,suffixes = c("",""))
users[is.na(users)] <- 0
# Pos Std
DF<-train[train$CHANNEL_Pos==1 & train$GEO_X>0,]
DF <- setNames(aggregate(list(train$GEO_X), list(train$USER_ID),sd), c('USER_ID','PosSD'))
DF[is.na(DF)] <- 0
users<-merge(users,DF,by='USER_ID',all.x = TRUE,suffixes = c("",""))
users[is.na(users)] <- 0
##########################################
# CARDS          #########################
##########################################
train <- transform(train, CARD_CAT = ifelse(CARD_CAT=='c', 1, 0))
mean(train$CARD_CAT) #0.05325242 / 0.06369311 /0.0672246
DF<-setNames(aggregate(list(train$CARD_CAT), list(train$POI_ID),mean), c('POI_ID','CARDS'))
CARDSvsPOI<-DF
DF<-merge(x=train,y=CARDSvsPOI,by='POI_ID',all.x=TRUE)
DF<-setNames(aggregate(list(DF$CARDS), list(DF$USER_ID),sum), c('USER_ID','CARDS'))
DF<-merge(x=users,y=DF,by='USER_ID',all.x=TRUE)
DF$CARDS[is.na(DF$CARDS)] <- 0
users$CARDS<-DF$CARDS
##########################################
# Close to Airport
users$FlyFreq<-0
DF<-train[,c('USER_ID','GEO_X','GEO_Y')]
DF<-DF[DF$GEO_X>0,]
DF$Xbase<-653409
DF$Ybase<-237084
DF$Dist<-(DF$GEO_X-DF$Xbase)*(DF$GEO_X-DF$Xbase)+(DF$GEO_Y-DF$Ybase)*(DF$GEO_Y-DF$Ybase)
DF<-transform(DF, CLOSE = ifelse(Dist<3000, 1, 0))
DF <- setNames(aggregate(list(DF$CLOSE), list(DF$USER_ID),sum), c('USER_ID','CLOSE'))
users<-merge(users,DF,by='USER_ID',all.x = TRUE,suffixes = c("",""))
users[is.na(users)] <- 0

##########################################
# write.table(users, "users15.csv",row.names=FALSE,sep=',')
# users_2015<-read_csv("users15.csv")

# Generate submission

test<-users[,c('USER_ID','GEN','Age1','Age2','Age3','CAP','CIT','VIL','INC','WH','Have','Had','AMT','AMTb','NetFreq','PosFreq','CLOSE')]
predictions <- predict(xgb_model, data.matrix(test[,feature.names]))
submission  <- data.frame(USER_ID=test$USER_ID,SCORE=round(predictions,digits = 6))
write_csv(submission, "sub_1.csv")


# Haveseknek 0???-= 0.0015 worse



