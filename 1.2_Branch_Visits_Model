setwd("D:\\ECML")
library(readr)
library(data.table)
library(xgboost)
library(pROC)

train_xgb<-read_csv('train_store.csv')
test_xgb<-read_csv('test_store.csv')

train1<-train_xgb[train_xgb$USER_ID<190001,]
train2<-train_xgb[train_xgb$USER_ID>190000,]

###### train_xgb local popular
# how many pct off population at same location visited the branch
train_loc<-train_xgb
train_loc_agg<-setnames(aggregate(list(train_loc$TARGET), list(train_loc$LOC_ID,train_loc$POI_ID),sum),c('LOC_ID','POI_ID','FREQ'))
DF<-as.data.frame(cbind(LOC_ID = names(summary(as.factor(train_loc$LOC_ID),maxsum=100000)),COUNT = summary(as.factor(train_loc$LOC_ID),maxsum=100000)), stringsAsFactors=F, row.names = 1:length(summary(as.factor(train_loc$LOC_ID))))
train_loc_agg<-merge(x=train_loc_agg,y=DF,by='LOC_ID',all.x=TRUE)
train_loc_agg$FREQ<-as.numeric(train_loc_agg$FREQ)/as.numeric(train_loc_agg$COUNT)
train_loc_agg$RANK<-ave(train_loc_agg$FREQ,train_loc_agg$LOC_ID, FUN = function(x) rank(-x, ties.method = "first"))
train_loc_agg$RANK[train_loc_agg$FREQ==0]<-9999
train_loc_agg$TOP<-0
train_loc_agg$TOP[train_loc_agg$RANK==1]<-1
# add to train_xgb
train_xgb<-merge(x=train_xgb,y=train_loc_agg,by=c('LOC_ID','POI_ID'),all.x = TRUE)
# handle na
train_xgb$RANK[is.na(train_xgb$RANK)] <- 9999
train_xgb$TOP[is.na(train_xgb$TOP)] <- train_xgb$FREQ[is.na(train_xgb$FREQ)] <-(-9999)
# add to test
test_xgb<-merge(x=test_xgb,y=train_loc_agg,by=c('LOC_ID','POI_ID'),all.x = TRUE)
test_xgb$RANK[is.na(test_xgb$RANK)] <- 9999
test_xgb$TOP[is.na(test_xgb$TOP)] <- test_xgb$FREQ[is.na(test_xgb$FREQ)] <-(-9999)

###### train1 local popular
train_loc<-train1
train_loc_agg<-setnames(aggregate(list(train_loc$TARGET), list(train_loc$LOC_ID,train_loc$POI_ID),sum),c('LOC_ID','POI_ID','FREQ'))
DF<-as.data.frame(cbind(LOC_ID = names(summary(as.factor(train_loc$LOC_ID),maxsum=100000)),COUNT = summary(as.factor(train_loc$LOC_ID),maxsum=100000)), stringsAsFactors=F, row.names = 1:length(summary(as.factor(train_loc$LOC_ID))))
train_loc_agg<-merge(x=train_loc_agg,y=DF,by='LOC_ID',all.x=TRUE)
train_loc_agg$FREQ<-as.numeric(train_loc_agg$FREQ)/as.numeric(train_loc_agg$COUNT)
train_loc_agg$RANK<-ave(train_loc_agg$FREQ,train_loc_agg$LOC_ID, FUN = function(x) rank(-x, ties.method = "first"))
train_loc_agg$RANK[train_loc_agg$FREQ==0]<-9999
train_loc_agg$TOP<-0
train_loc_agg$TOP[train_loc_agg$RANK==1]<-1
# add to train2
train2<-merge(x=train2,y=train_loc_agg,by=c('LOC_ID','POI_ID'),all.x = TRUE)
# handle na
train2$RANK[is.na(train2$RANK)] <- 9999
train2$TOP[is.na(train2$TOP)] <- -9999
train2$FREQ[is.na(train2$FREQ)] <- -9999

###### train2 local popular
train_loc<-train2
train_loc_agg<-setnames(aggregate(list(train_loc$TARGET), list(train_loc$LOC_ID,train_loc$POI_ID),sum),c('LOC_ID','POI_ID','FREQ'))
DF<-as.data.frame(cbind(LOC_ID = names(summary(as.factor(train_loc$LOC_ID),maxsum=100000)),COUNT = summary(as.factor(train_loc$LOC_ID),maxsum=100000)), stringsAsFactors=F, row.names = 1:length(summary(as.factor(train_loc$LOC_ID))))
train_loc_agg<-merge(x=train_loc_agg,y=DF,by='LOC_ID',all.x=TRUE)
train_loc_agg$FREQ<-as.numeric(train_loc_agg$FREQ)/as.numeric(train_loc_agg$COUNT)
train_loc_agg$RANK<-ave(train_loc_agg$FREQ,train_loc_agg$LOC_ID, FUN = function(x) rank(-x, ties.method = "first"))
train_loc_agg$RANK[train_loc_agg$FREQ==0]<-9999
train_loc_agg$TOP<-0
train_loc_agg$TOP[train_loc_agg$RANK==1]<-1
# add to train1
train1<-merge(x=train1,y=train_loc_agg,by=c('LOC_ID','POI_ID'),all.x = TRUE)
# handle na
train1$RANK[is.na(train1$RANK)] <- 9999
train1$TOP[is.na(train1$TOP)] <- -9999
train1$FREQ[is.na(train1$FREQ)] <- -9999

###### 1st xgb on train1

train<-train1
feature.names<-c('PDIST','PDISTrank','HDIST','HDISTrank','Hcross','Pcross','Age1','Age3','CAP','CIT','VIL','GEN','INC','Have','WH')
train_features<-train[,feature.names]
train_target<-setnames(data.frame(train$TARGET),'TARGET')

h <-sample(nrow(train_target),200)
dval   <-xgb.DMatrix(as.matrix(sapply(train_features[h,], as.numeric)),label=train_target$TARGET[h])
dtrain <-xgb.DMatrix(as.matrix(sapply(train_features[-h,], as.numeric)),label=train_target$TARGET[-h])

set.seed(3301)
xgb_watchlist <-list(val=dval,train=dtrain)
xgb_params <- list(  objective           = "binary:logistic",    # rank:pairwise binary:logistic
                     booster = "gbtree",
                     eval_metric = "auc",
                     eta                 = 0.06,                          # 0.06
                     max_depth           = 6,                             # 6
                     subsample           = 0.6,                           # 0.6
                     colsample_bytree    = 0.6                            # 0.6
)
xgb_model <- xgb.train(
  params              = xgb_params, 
  data                = dtrain, 
  nrounds             = 450,     # 405
  verbose             = 0,       # 0 if full training set 
  watchlist           = xgb_watchlist,
  print.every.n       = 20,
  maximize            = FALSE
)

# add PRED to train2
train2$HDIST<-as.numeric(train2$HDIST)
predictions <- predict(xgb_model, data.matrix(train2[,feature.names]))
train2$PRED<-predictions

# calc train1 excess visit and add to train 2
dtrain<-train1[,feature.names]
dtrain$HDIST<-as.numeric(dtrain$HDIST)
predictions <- predict(xgb_model, data.matrix(dtrain))
cor(train1$TARGET,predictions)    #0.6857177
pred<-setnames(data.frame(train$USER_ID,train$POI_ID,predictions),c('USER_ID','POI_ID','NUMBER_OF_VISITS'))
pred_visit<-aggregate(pred$NUMBER_OF_VISITS,list(pred$POI_ID),mean)
act_visit<-aggregate(train$TARGET,list(train$POI_ID),mean)
excess_visit<-merge(x=pred_visit,y=act_visit,by='Group.1')
excess_visit$EXCESS<-excess_visit$x.y-excess_visit$x.x
excess_visit$x.x<-excess_visit$x.y<-NULL
colnames(excess_visit)[1]<-'POI_ID'
train2<-merge(x=train2,y=excess_visit,by='POI_ID',all.x=TRUE)

###### 1st xgb on train2
train<-train2
#feature.names<-c('PDIST','PDISTrank','HDIST','HDISTrank','Hcross','Pcross','Age1','Age3','CAP','CIT','VIL','GEN','INC','Have','WH')
train_features<-train[,feature.names]
train_target<-setnames(data.frame(train$TARGET),'TARGET')

h <-sample(nrow(train_target),100)
dval   <-xgb.DMatrix(as.matrix(sapply(train_features[h,], as.numeric)),label=train_target$TARGET[h])
dtrain <-xgb.DMatrix(as.matrix(sapply(train_features[-h,], as.numeric)),label=train_target$TARGET[-h])

set.seed(3301)
xgb_watchlist <-list(val=dval,train=dtrain)
xgb_params <- list(  objective           = "binary:logistic",   
                     booster = "gbtree",
                     eval_metric = "auc",
                     eta                 = 0.06,    
                     max_depth           = 6, 
                     subsample           = 0.6,  
                     colsample_bytree    = 0.6   
)
xgb_model <- xgb.train(
  params              = xgb_params, 
  data                = dtrain, 
  nrounds             = 450,
  verbose             = 1,
  watchlist           = xgb_watchlist,
  print.every.n       = 20,
  maximize            = FALSE
)

# add PRED to train2
train1$HDIST<-as.numeric(train1$HDIST)
predictions <- predict(xgb_model, data.matrix(train1[,feature.names]))
train1$PRED<-predictions

# calc train2 excess visit and add to train1 - excelben ellenorizni
dtrain<-train2[,feature.names]
dtrain$HDIST<-as.numeric(dtrain$HDIST)
predictions <- predict(xgb_model, data.matrix(dtrain))
pred<-setnames(data.frame(train$USER_ID,train$POI_ID,predictions),c('USER_ID','POI_ID','NUMBER_OF_VISITS'))
pred_visit<-aggregate(pred$NUMBER_OF_VISITS,list(pred$POI_ID),mean)
act_visit<-aggregate(train$TARGET,list(train$POI_ID),mean)
excess_visit<-merge(x=pred_visit,y=act_visit,by='Group.1')
excess_visit$EXCESS<-excess_visit$x.y-excess_visit$x.x
excess_visit$x.x<-NULL
excess_visit$x.y<-NULL
colnames(excess_visit)[1]<-'POI_ID'
train1<-merge(x=train1,y=excess_visit,by='POI_ID',all.x=TRUE)

#######################################################################
# xgb on train_xgb to store xgb1_model for test
#######################################################################
train<-train_xgb
#feature.names<-c('PDIST','PDISTrank','HDIST','HDISTrank','Hcross','Pcross','Age1','CAP','CIT','VIL','GEN')
train_features<-train[,feature.names]
train_target<-setnames(data.frame(train$TARGET),'TARGET')

h <-sample(nrow(train_target),100)
dval   <-xgb.DMatrix(as.matrix(sapply(train_features[h,], as.numeric)),label=train_target$TARGET[h])
dtrain <-xgb.DMatrix(as.matrix(sapply(train_features[-h,], as.numeric)),label=train_target$TARGET[-h])

set.seed(3301)
xgb_watchlist <-list(val=dval,train=dtrain)
xgb1_params <- list(  objective           = "binary:logistic", 
                     booster = "gbtree",
                     eval_metric = "auc",
                     eta                 = 0.06,  
                     max_depth           = 6, 
                     subsample           = 0.6,
                     colsample_bytree    = 0.6 
)
xgb1_model <- xgb.train(
  params              = xgb_params, 
  data                = dtrain, 
  nrounds             = 450, 
  verbose             = 1, 
  watchlist           = xgb_watchlist,
  print.every.n       = 20,
  maximize            = FALSE
)
dtrain<-train[,feature.names]
dtrain$HDIST<-as.numeric(dtrain$HDIST)
predictions <- predict(xgb1_model, data.matrix(dtrain))
cor(train$TARGET,predictions)   
train_xgb$PRED<-predictions

# calc train_xgb excess visit and add to train_xgb 
pred<-setnames(data.frame(train$USER_ID,train$POI_ID,predictions),c('USER_ID','POI_ID','NUMBER_OF_VISITS'))
pred_visit<-aggregate(pred$NUMBER_OF_VISITS,list(pred$POI_ID),mean)
act_visit<-aggregate(train$TARGET,list(train$POI_ID),mean)
excess_visit<-merge(x=pred_visit,y=act_visit,by='Group.1')
excess_visit$EXCESS<-excess_visit$x.y-excess_visit$x.x
excess_visit$x.x<-NULL
excess_visit$x.y<-NULL
colnames(excess_visit)[1]<-'POI_ID'
write_csv(excess_visit, "excess_visit_xgb.csv") # del
train_xgb<-merge(x=train_xgb,y=excess_visit,by='POI_ID',all.x=TRUE)

#######################  add EXCESS to test
test_xgb<-merge(x=test_xgb,y=excess_visit,by='POI_ID',all.x=TRUE)

####################### PRED test
dtest<-test_xgb[,feature.names]
dtest$HDIST<-as.numeric(dtest$HDIST)
predictions <- predict(xgb1_model, data.matrix(dtest))
test_xgb$PRED<-predictions

#######################################################################
# 2nd xgb on rbind(train1,train2)
#######################################################################

train<-rbind(train1,train2)
feature.names<-c('PRED','RANK','TOP','FREQ','EXCESS','CAP','CIT','VIL','GEN','INC')

train_features<-train[,feature.names]
train_target<-setnames(data.frame(train$TARGET),'TARGET')
h <-sample(nrow(train_target),100)
dval   <-xgb.DMatrix(as.matrix(sapply(train_features[h,], as.numeric)),label=train_target$TARGET[h])
dtrain <-xgb.DMatrix(as.matrix(sapply(train_features[-h,], as.numeric)),label=train_target$TARGET[-h])
set.seed(3301)
xgb_watchlist <-list(val=dval,train=dtrain)

xgb2_params <- list(  objective           = "binary:logistic",    
                      booster = "gbtree",
                      eval_metric = "auc",
                      eta                 = 0.06,  
                      max_depth           = 7,
                      subsample           = 0.7, 
                      colsample_bytree    = 0.7  
)
xgb2_model <- xgb.train(
  params              = xgb2_params, 
  data                = dtrain, 
  nrounds             = 300,   #500
  verbose             = 1, 
  watchlist           = xgb_watchlist,
  print.every.n       = 50,
  maximize            = FALSE
)
# modelcv = xgb.cv(params = xgb2_params, nrounds = 500, nfold = 3, data = dtrain, early.stop.round = 20,  print.every.n = round(500)/10 )
# IMP_all_xgb2<-as.data.frame(xgb.importance(feature_names = feature.names, model = xgb2_model))
# xgb.plot.importance(IMP_all_xgb2)
predictions <- predict(xgb2_model, data.matrix(train_features))
cor(predictions,train$TARGET)  #0.7294268

dtest<-test_xgb[,feature.names]
dtest$HDIST<-as.numeric(dtest$HDIST)
predictions <- predict(xgb2_model, data.matrix(dtest))
cor(predictions,test_xgb$TARGET)

####### submit gen
sub<-setnames(data.frame(test_xgb$USER_ID,test_xgb$POI_ID,predictions),c('USER_ID','POI_ID','NUMBER_OF_VISITS'))
sub$NUMBER_OF_VISITS<-round(sub$NUMBER_OF_VISITS,4)
sub$RANK<-ave(sub$NUMBER_OF_VISITS, c(sub$USER_ID), FUN = function(x) rank(-x, ties.method = "first"))
sub<-sub[sub$RANK<6,]
write.table(sub, "sub_xgbblend_wFREQfin.csv",row.names=FALSE,sep=',')
